// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Room {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  description  String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assignedRoom Image[]
}

model Image {
  id               Int    @id @default(autoincrement())
  publicId         String @db.VarChar(255)
  alt              String @db.VarChar(255)
  assignedToRoomId Int?
  assignedToRoom   Room?  @relation(fields: [assignedToRoomId], references: [id])
  assignedToMenuId Int?
  assignedToMenu   Menu?  @relation(fields: [assignedToMenuId], references: [id])
}

model Menu {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  price        Int?
  description  String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assignedMenu Image[]
}

// Next auth User Schema

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
